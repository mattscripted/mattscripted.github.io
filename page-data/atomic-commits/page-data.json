{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/atomic-commits/","result":{"data":{"site":{"siteMetadata":{"title":"Matt Shelley"}},"markdownRemark":{"id":"50287fdd-8c42-5b4c-b397-c5d83c90f5b3","excerpt":"There was a time where my git commits were nothing more than saving my work. I made a lot of changes, wrote an unhelpful message, and committed. Unfortunately…","html":"<p>There was a time where my git commits were nothing more than saving my work. I made a lot of changes, wrote an unhelpful message, and committed.</p>\n<p>Unfortunately, when we write commits this way, we lose confidence in our work, reduce our understanding, and hurt the quality of our software [1].</p>\n<p>Instead, we can write atomic commits: small changes with helpful messages.</p>\n<h2>But first, what even are git commits?</h2>\n<p>We can think of git commits as snapshots of our project at specific moments in time. Individually, each commit consists of a change and a message explaining the change. Together, commits tell the story of our project [2].</p>\n<p>Consider this commit to a README to explain branching structure:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Clarify branches in README</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">README.md\n\n+ ## Branches\n+ \n+ - `master` is the initial empty project\n+ - `solution` is the intended solution after the talk\n+ </code></pre></div>\n<p>Now, consider these commit messages from <code class=\"language-text\">git log</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">* Display search results after searching\n* Implement submit button for search\n* Implement search text box\n* Update all packages to support latest React testing-library\n* Clarify branches in README\n* Split test command into test and test:watch to support Husky\n* Remove cruft from create-react-app, and set up empty project\n* Install standard for linting\n* Initialize project using create-react-app</code></pre></div>\n<p>When we thoughtfully create commits, we can confidently jump to any point in time, because we understand the story of our project. We trust our software.</p>\n<h2>Make small changes</h2>\n<p>If we extend the Unix philosophy of “do one thing, and do it well,” [3] a commit should <em>change one thing, and change it well</em>.</p>\n<p>With this mindset, our approach to writing software becomes:</p>\n<ol>\n<li>Change one thing (feature, bug, refactor, etc.) [1]</li>\n<li>Verify things work as expected</li>\n<li>Commit</li>\n<li>Repeat</li>\n</ol>\n<p>With small changes, we can safely revert to a previous working state when our latest changes go awry. Thus, we can confidently move forward.</p>\n<h2>Write helpful messages</h2>\n<p>Personally, I write short commit messages that reference the ticket and provide a quick summary of why / what things changed.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">PROJ-123 Update all font sizes to match latest designs</code></pre></div>\n<p>More specifically, I like Peter Hutterer’s thoughts on commit messages.</p>\n<p>He reminds us that software is collaborative, and commit messages show whether we are good collaborators. He adds [4]:</p>\n<blockquote>\n<p>A good commit message should answer three questions …</p>\n<ol>\n<li>Why is it necessary? …</li>\n<li>How does it address the issue? …</li>\n<li>What effects does the patch have? …</li>\n</ol>\n</blockquote>\n<p>If your commit messages often read <code class=\"language-text\">PR feedback</code> or <code class=\"language-text\">Fixed a bug</code>, please take a moment to improve them. The extra thought to your commit messages will help both you and your team in the long run.</p>\n<p>With helpful messages, we encourage collaboration by documenting why and what things changed. We improve our understanding.</p>\n<h2>In Closing</h2>\n<p>With atomic commits, we make small changes with helpful messages, so we build confidence in our work and our understanding of it. Atomic commits encourage us to write high-quality software.</p>\n<h2>References</h2>\n<ol>\n<li><a href=\"https://dev.to/cbillowes/why-i-create-atomic-commits-in-git-kfi\">“Why I Create Atomic Commits In Git.” Clarice Bouwer</a></li>\n<li><a href=\"https://www.atlassian.com/git/tutorials/saving-changes/git-commit\">“Git commit.” Atlassian</a></li>\n<li><a href=\"https://homepage.cs.uri.edu/~thenry/resources/unix_art/ch01s06.html\">“Basics of the Unix Philosophy.” Eric Steven Raymond</a></li>\n<li><a href=\"http://who-t.blogspot.com/2009/12/on-commit-messages.html\">“On commit messages.” Peter Hutterer</a></li>\n</ol>","frontmatter":{"title":"Atomic Commits","date":"August 29, 2020","description":"Writing small commits with helpful messages"}}},"pageContext":{"slug":"/atomic-commits/","previous":{"fields":{"slug":"/commitment/"},"frontmatter":{"title":"Commitment: Weekly Posts"}},"next":null}}}