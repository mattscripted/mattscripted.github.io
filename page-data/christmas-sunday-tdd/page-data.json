{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/christmas-sunday-tdd/","result":{"data":{"site":{"siteMetadata":{"title":"Matt Shelley"}},"markdownRemark":{"id":"915aa004-06b9-5931-89fa-840676ece7be","excerpt":"I recently fell in love with Test-Driven Development (TDD). I find the practice enables me to write high-quality code with the confidence to refactor anytime…","html":"<p>I recently fell in love with Test-Driven Development (TDD). I find the practice enables me to write high-quality code with the confidence to refactor anytime. Honestly, it has been a breath of fresh air to software development.</p>\n<p>If you’re unfamiliar with the concept, Test-Driven Development means writing tests before writing production code. Basically, we follow this process:</p>\n<ol>\n<li>Write a failing test for some new requirement</li>\n<li>Write the least amount of code to make all tests pass</li>\n<li>Repeat for the next requirement</li>\n</ol>\n<p>With each change, we can refactor our code knowing it still works as intended.</p>\n<h2>Christmas Sundays</h2>\n<p>As an early example, I picked up the <a href=\"https://www.freecodecamp.org/learn/coding-interview-prep/rosetta-code/day-of-the-week\">Rosetta Code challenge ‘Day of the Week’ on freeCodeCamp</a>. I will refer to this example as <em>Christmas Sundays</em>:</p>\n<blockquote>\n<p>Write a function that takes a start year and an end year and return an array of all the years where the 25th of December will be a Sunday.</p>\n</blockquote>\n<p>Let’s build this function together using Test-Driven Development.</p>\n<h2>Writing <em>Christmas Sundays</em> with TDD</h2>\n<p>First, we need to create a test that checks the output. We expect an array.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// findChristmasSundays.test.ts</span>\n\n<span class=\"token keyword\">import</span> findChristmasSundays <span class=\"token keyword\">from</span> <span class=\"token string\">'./findChristmasSundays'</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'findChristmasSundays'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'returns an array'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">findChristmasSundays</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeInstanceOf</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">Array</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>This test fails because we have not even written the <code class=\"language-text\">findChristmasSundays()</code> function. So, let’s write the least code we can to pass the test:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// findChristmasSundays.ts</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">findChristmasSundays</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> findChristmasSundays</code></pre></div>\n<p>Notice we have not set inputs, because we don’t need them—<em>yet</em>.</p>\n<p>Next, we need to check that we receive an array with the start year, if the start year has Christmas on a Sunday. To find such a year, we can look through the calendar. (I chose 2022.)</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// findChristmasSundays.test.ts (snippet)</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'returns the start year, if the start year has Christmas on a Sunday'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> christmasSundayYear <span class=\"token operator\">=</span> <span class=\"token number\">2022</span>\n  <span class=\"token keyword\">const</span> actual <span class=\"token operator\">=</span> <span class=\"token function\">findChristmasSundays</span><span class=\"token punctuation\">(</span>christmasSundayYear<span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>actual<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toContain</span><span class=\"token punctuation\">(</span>christmasSundayYear<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Since we added an input, we should update the previous test to use that input.</p>\n<p>In my opinion, it is totally fine to refactor tests just like we would refactor production code. In fact, I encourage it.</p>\n<p>Then, we can write the simplest code to pass the test:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// findChristmasSundays.ts</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">findChristmasSundays</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">startYear<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>startYear<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Technically, all of our tests pass right now. But, obviously, this approach can’t quite be right.</p>\n<p>Well, it depends on what we are trying to accomplish. If the function was named <code class=\"language-text\">convertToArray()</code>, it would be valid, wouldn’t it? Except, we’re not building <code class=\"language-text\">convertToArray()</code>, we’re building <code class=\"language-text\">findChristmasSundays()</code>, so we still have more work to do.</p>\n<p>Okay, so what if we pass in a year that does not have Christmas on a Sunday? Again, we can find such a year on the calendar. (I chose 2020.)</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// findChristmasSundays.test.ts (snippet)</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'does not return the start year, if the start year does not have Christmas on a Sunday'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> nonChristmasSundayYear <span class=\"token operator\">=</span> <span class=\"token number\">2020</span>\n  <span class=\"token keyword\">const</span> actual <span class=\"token operator\">=</span> <span class=\"token function\">findChristmasSundays</span><span class=\"token punctuation\">(</span>nonChristmasSundayYear<span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>actual<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>not<span class=\"token punctuation\">.</span><span class=\"token function\">toContain</span><span class=\"token punctuation\">(</span>nonChristmasSundayYear<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Our test fails because we return a year where Christmas does not occur on a Sunday, since our previous code just returned an array with the start year.</p>\n<p>Now, we can refactor our function to check if the year should be included.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// findChristmasSundays.ts (snippet)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">findChristmasSundays</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">startYear<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token constant\">DAY_OF_WEEK_SUNDAY</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n  <span class=\"token comment\">// With Date, months are 0-indexed, so 11 means December</span>\n  <span class=\"token comment\">// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date</span>\n  <span class=\"token keyword\">const</span> christmasDate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>startYear<span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>christmasDate<span class=\"token punctuation\">.</span><span class=\"token function\">getDay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token constant\">DAY_OF_WEEK_SUNDAY</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>startYear<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Great! We can now determine if a year has Christmas on a Sunday.</p>\n<p>Next, we need to check for a range of years by using start year and end year. At this point, we have the choice whether to include the end year in the range.</p>\n<p>Personally, I want to exclude the end year to discourage the function from being used for single years, like <code class=\"language-text\">findChristmasSundays(2020, 2020)</code>. To me, this usage feels awkward. Instead, I think <code class=\"language-text\">hasChristmasSunday(2020)</code> would be better for checking just one year.</p>\n<p>(Come to think of it, that new function may be useful later on. Hmm…)</p>\n<p>To enforce this decision, we can throw an error if the end year is less than or equal to the start year.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// findChristmasSundays.test.ts (snippet)</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'throws an error, if the end year is less than or equal to the start year'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> expectedError <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'endYear must be greater than startYear'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">findChristmasSundays</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">toThrowError</span><span class=\"token punctuation\">(</span>expectedError<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">findChristmasSundays</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">toThrowError</span><span class=\"token punctuation\">(</span>expectedError<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// findChristmasSundays.ts (snippet)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">findChristmasSundays</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">startYear<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> endYear<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>endYear <span class=\"token operator\">&lt;=</span> startYear<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'endYear must be greater than startYear'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We should refactor all tests to support 2 inputs for the function. With TDD, we can refactor with confidence, so don’t be afraid to refactor your tests too.</p>\n<p>Next, we need to check for a range of dates:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// findChristmasSundays.test.ts (snippet)</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'returns all years where Christmas is on a Sunday within a range'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> startYear <span class=\"token operator\">=</span> <span class=\"token number\">2000</span>\n  <span class=\"token keyword\">const</span> endYear <span class=\"token operator\">=</span> <span class=\"token number\">2030</span>\n\n  <span class=\"token keyword\">const</span> actual <span class=\"token operator\">=</span> <span class=\"token function\">findChristmasSundays</span><span class=\"token punctuation\">(</span>startYear<span class=\"token punctuation\">,</span> endYear<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> expected <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2005</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2011</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2016</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2022</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>actual<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toStrictEqual</span><span class=\"token punctuation\">(</span>expected<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// findChristmasSundays.ts</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">findChristmasSundays</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">startYear<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> endYear<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>endYear <span class=\"token operator\">&lt;=</span> startYear<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'endYear must be greater than startYear'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token constant\">DAY_OF_WEEK_SUNDAY</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">const</span> christmasSundays <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> year <span class=\"token operator\">=</span> startYear<span class=\"token punctuation\">;</span> year <span class=\"token operator\">&lt;=</span> endYear<span class=\"token punctuation\">;</span> year<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// With Date, months are 0-indexed, so 11 means December</span>\n    <span class=\"token comment\">// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date</span>\n    <span class=\"token keyword\">const</span> christmasDate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>year<span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>christmasDate<span class=\"token punctuation\">.</span><span class=\"token function\">getDay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token constant\">DAY_OF_WEEK_SUNDAY</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      christmasSundays<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>year<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> christmasSundays\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> findChristmasSundays</code></pre></div>\n<p>Functionally, we almost have everything! But, let’s step back and recall that I said the end year should not be included in the range. Instead, we should only check for <code class=\"language-text\">startYear &lt;= year &lt; endYear</code>.</p>\n<p>So, let’s update our solution:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// findChristmasSundays.test.ts (snippet)</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'does not include the end year, even if the end year has Christmas on a Sunday'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> startYear <span class=\"token operator\">=</span> <span class=\"token number\">2000</span>\n  <span class=\"token keyword\">const</span> endYear <span class=\"token operator\">=</span> <span class=\"token number\">2022</span>\n\n  <span class=\"token keyword\">const</span> actual <span class=\"token operator\">=</span> <span class=\"token function\">findChristmasSundays</span><span class=\"token punctuation\">(</span>startYear<span class=\"token punctuation\">,</span> endYear<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> expected <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2005</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2011</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2016</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>actual<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toStrictEqual</span><span class=\"token punctuation\">(</span>expected<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// findChristmasSundays.ts (snippet)</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> year <span class=\"token operator\">=</span> startYear<span class=\"token punctuation\">;</span> year <span class=\"token operator\">&lt;</span> endYear<span class=\"token punctuation\">;</span> year<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Further Validation</h3>\n<p>While functionally the code works, you may have noticed that we could pass some more bad inputs. For example, <code class=\"language-text\">number</code> refers to integer and non-integer values. Let’s catch a few more cases while we’re here:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// findChristmasSundays.test.ts (snippet)</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'throws an error, if the start year is not a positive integer'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> expectedError <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'startYear must be a positive integer'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">findChristmasSundays</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">toThrowError</span><span class=\"token punctuation\">(</span>expectedError<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">findChristmasSundays</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">toThrowError</span><span class=\"token punctuation\">(</span>expectedError<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">findChristmasSundays</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">toThrowError</span><span class=\"token punctuation\">(</span>expectedError<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'throws an error, if the end year is not a positive integer'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> expectedError <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'endYear must be a positive integer'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">findChristmasSundays</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">toThrowError</span><span class=\"token punctuation\">(</span>expectedError<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">findChristmasSundays</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">toThrowError</span><span class=\"token punctuation\">(</span>expectedError<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">findChristmasSundays</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">toThrowError</span><span class=\"token punctuation\">(</span>expectedError<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// findChristmasSundays.ts (snippet)</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>startYear <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>Number<span class=\"token punctuation\">.</span><span class=\"token function\">isInteger</span><span class=\"token punctuation\">(</span>startYear<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'startYear must be a positive integer'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>endYear <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>Number<span class=\"token punctuation\">.</span><span class=\"token function\">isInteger</span><span class=\"token punctuation\">(</span>endYear<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'endYear must be a positive integer'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Refactor</h3>\n<p>With all of our test cases in place, we can now refactor the code with confidence to clean things up. We’ll know if we broke something because one of the tests will fail. This is the beauty of Test-Driven Development.</p>\n<p>Here’s our final, refactored solution:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// findChristmasSundays.test.ts</span>\n\n<span class=\"token keyword\">import</span> findChristmasSundays <span class=\"token keyword\">from</span> <span class=\"token string\">'./findChristmasSundays'</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'findChristmasSundays'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'throws an error, if the start year is not a positive integer'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> expectedError <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'startYear must be a positive integer'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">findChristmasSundays</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">toThrowError</span><span class=\"token punctuation\">(</span>expectedError<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">findChristmasSundays</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">toThrowError</span><span class=\"token punctuation\">(</span>expectedError<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">findChristmasSundays</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">toThrowError</span><span class=\"token punctuation\">(</span>expectedError<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'throws an error, if the end year is not a positive integer'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> expectedError <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'endYear must be a positive integer'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">findChristmasSundays</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">toThrowError</span><span class=\"token punctuation\">(</span>expectedError<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">findChristmasSundays</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">toThrowError</span><span class=\"token punctuation\">(</span>expectedError<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">findChristmasSundays</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">toThrowError</span><span class=\"token punctuation\">(</span>expectedError<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'throws an error, if the end year is less than or equal to the start year'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> earlierYear <span class=\"token operator\">=</span> <span class=\"token number\">2000</span>\n    <span class=\"token keyword\">const</span> laterYear <span class=\"token operator\">=</span> <span class=\"token number\">2001</span>\n\n    <span class=\"token keyword\">const</span> expectedError <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'endYear must be greater than startYear'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">findChristmasSundays</span><span class=\"token punctuation\">(</span>earlierYear<span class=\"token punctuation\">,</span> earlierYear<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">toThrowError</span><span class=\"token punctuation\">(</span>expectedError<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">findChristmasSundays</span><span class=\"token punctuation\">(</span>laterYear<span class=\"token punctuation\">,</span> earlierYear<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">toThrowError</span><span class=\"token punctuation\">(</span>expectedError<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'returns an array'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">findChristmasSundays</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2001</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeInstanceOf</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">Array</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'returns the start year, if the start year has Christmas on a Sunday'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> christmasSundayYear <span class=\"token operator\">=</span> <span class=\"token number\">2022</span>\n    <span class=\"token keyword\">const</span> actual <span class=\"token operator\">=</span> <span class=\"token function\">findChristmasSundays</span><span class=\"token punctuation\">(</span>christmasSundayYear<span class=\"token punctuation\">,</span> christmasSundayYear <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>actual<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toContain</span><span class=\"token punctuation\">(</span>christmasSundayYear<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'does not return the start year, if the start year does not have Christmas on a Sunday'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> nonChristmasSundayYear <span class=\"token operator\">=</span> <span class=\"token number\">2020</span>\n    <span class=\"token keyword\">const</span> actual <span class=\"token operator\">=</span> <span class=\"token function\">findChristmasSundays</span><span class=\"token punctuation\">(</span>nonChristmasSundayYear<span class=\"token punctuation\">,</span> nonChristmasSundayYear <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>actual<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>not<span class=\"token punctuation\">.</span><span class=\"token function\">toContain</span><span class=\"token punctuation\">(</span>nonChristmasSundayYear<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'returns all years where Christmas is on a Sunday within a range'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> startYear <span class=\"token operator\">=</span> <span class=\"token number\">2000</span>\n    <span class=\"token keyword\">const</span> endYear <span class=\"token operator\">=</span> <span class=\"token number\">2030</span>\n\n    <span class=\"token keyword\">const</span> actual <span class=\"token operator\">=</span> <span class=\"token function\">findChristmasSundays</span><span class=\"token punctuation\">(</span>startYear<span class=\"token punctuation\">,</span> endYear<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> expected <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2005</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2011</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2016</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2022</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>actual<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toStrictEqual</span><span class=\"token punctuation\">(</span>expected<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'does not include the end year, even if the end year has Christmas on a Sunday'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> startYear <span class=\"token operator\">=</span> <span class=\"token number\">2000</span>\n    <span class=\"token keyword\">const</span> endYear <span class=\"token operator\">=</span> <span class=\"token number\">2022</span>\n\n    <span class=\"token keyword\">const</span> actual <span class=\"token operator\">=</span> <span class=\"token function\">findChristmasSundays</span><span class=\"token punctuation\">(</span>startYear<span class=\"token punctuation\">,</span> endYear<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> expected <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2005</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2011</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2016</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>actual<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toStrictEqual</span><span class=\"token punctuation\">(</span>expected<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// findChristmasSundays.ts</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">hasChristmasSunday</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">year<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token constant\">DAY_OF_WEEK_SUNDAY</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n  <span class=\"token comment\">// With Date, months are 0-indexed, so 11 means December</span>\n  <span class=\"token comment\">// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date</span>\n  <span class=\"token keyword\">const</span> christmasDate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>year<span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> christmasDate<span class=\"token punctuation\">.</span><span class=\"token function\">getDay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token constant\">DAY_OF_WEEK_SUNDAY</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">findChristmasSundays</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">startYear<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> endYear<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>startYear <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>Number<span class=\"token punctuation\">.</span><span class=\"token function\">isInteger</span><span class=\"token punctuation\">(</span>startYear<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'startYear must be a positive integer'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>endYear <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>Number<span class=\"token punctuation\">.</span><span class=\"token function\">isInteger</span><span class=\"token punctuation\">(</span>endYear<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'endYear must be a positive integer'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>endYear <span class=\"token operator\">&lt;=</span> startYear<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'endYear must be greater than startYear'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> christmasSundays <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> year <span class=\"token operator\">=</span> startYear<span class=\"token punctuation\">;</span> year <span class=\"token operator\">&lt;</span> endYear<span class=\"token punctuation\">;</span> year<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">hasChristmasSunday</span><span class=\"token punctuation\">(</span>year<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      christmasSundays<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>year<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> christmasSundays\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> findChristmasSundays</code></pre></div>\n<p>Alternatively, you may view the gist here: <a href=\"https://gist.github.com/mattscripted/a53660858bfb3d983752b9ab0b37d904\">TDD with Christmas Sundays</a>.</p>\n<h2>In Closing</h2>\n<p>With Test-Driven Development, we write tests before our production code. As as a result, we naturally write tests in parallel to our code, treating tests with the same respect as our code. Test-Driven Development encourages us to write high-quality software by refactoring with confidence.</p>","frontmatter":{"title":"Walkthrough: Finding Christmas Sundays with Test-Driven Development","date":"August 08, 2020","description":"Applying Test-Driven Development to the Rosetta Code 'Day of the Week' challenge"}}},"pageContext":{"slug":"/christmas-sunday-tdd/","previous":{"fields":{"slug":"/student-loans/"},"frontmatter":{"title":"Paying off My Student Loans"}},"next":{"fields":{"slug":"/export-vs-export-default/"},"frontmatter":{"title":"JS: Export vs Export Default"}}}}}