{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/intro-big-o-notation/","result":{"data":{"site":{"siteMetadata":{"title":"Matt Shelley"}},"markdownRemark":{"id":"b89b271c-a80f-5fab-a4cb-a6e53c3d1852","excerpt":"As programmers, we write code to tell computers what to do. The computer translates this code into operations, and then executes those operations with some…","html":"<p>As programmers, we write code to tell computers what to do. The computer translates this code into operations, and then executes those operations with some amount of space in memory in some amount of time. We say that one block of code is more efficient than another if it uses less space or time.</p>\n<blockquote>\n<p>Efficient: performing or functioning in the best possible manner with the least waste of time and effort (<a href=\"https://www.dictionary.com/browse/efficient\">dictionary.com</a>)</p>\n</blockquote>\n<p>Suppose we want to to find the minimum value from an array of values.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">getMinimum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">values</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> minimum <span class=\"token operator\">=</span> <span class=\"token number\">Infinity</span>\n\n  values<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">&lt;</span> minimum<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      minimum <span class=\"token operator\">=</span> value\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> minimum\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>With this function, we step through the array of values; update the minimum whenever we find a new minimum; and, then return the minimum.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">getMinimum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">values</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Sort values from lowest to highest</span>\n  values<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> values<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token number\">Infinity</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>With this function, we sort the list so the minimum is the first element, and then return the first element.</p>\n<p>But, sorting is expensive, since we may need to compare every value against every other value. Therefore, it is more efficient to use the first function, even if there are more lines of code.</p>\n<p>With software, efficiency means using less space or time.</p>\n<h2>Measuring Efficiency</h2>\n<p>To measure efficiency, we can use <a href=\"https://en.wikipedia.org/wiki/Big_O_notation\">Big O Notation</a>. This notation measures the worst-case complexity of space or time for a function in relation to its inputs.</p>\n<p>Let’s look at some examples.</p>\n<h3>O(1)</h3>\n<p>With <code class=\"language-text\">O(1)</code> time, the work does not increase in relation to the input.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">logName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In this case, we will always call <code class=\"language-text\">console.log()</code> one time. It doesn’t matter what <code class=\"language-text\">name</code> is.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">logNameThreeTimes</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In this case, we will always call <code class=\"language-text\">console.log()</code> three times. Again, <code class=\"language-text\">name</code> does not matter.</p>\n<p>We say that these functions run in <strong>constant</strong> time.</p>\n<h3>O(n)</h3>\n<p>With <code class=\"language-text\">O(n)</code> time, the work increases linearly with the input.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">logUserNames</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">users</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  users<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In this case, we call <code class=\"language-text\">console.log()</code> once per user.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">logUserNamesThreeTimes</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">users</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  users<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  users<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  users<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In this case, we call <code class=\"language-text\">console.log()</code> three times per user, so the work still grows linearly.</p>\n<p>But, what happens when we add more logic to our code?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">logPublicUserNames</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">users</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  users<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>isPublic<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In this case, we may need to log 0 names, 1 name, some names, or every name. So, we assume the worst-case scenario: log every name. Thus, we still have <code class=\"language-text\">O(n)</code> time.</p>\n<p>We say these functions run in <strong>linear</strong> time.</p>\n<h3>O(n^2)</h3>\n<p>With <code class=\"language-text\">O(n^2)</code> time, the work increases quadratically with the inputs.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">countAppearances</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">values</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> appearancesByValue <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  values<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    appearancesByValues<span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    values<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">comparison</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">===</span> comparison<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        appearancesByValues<span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> appearancesByValue\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In this case, we step through all values for each value we check. If we increase the length of values by 1, we have to check every value yet again.</p>\n<p>We say this function runs in <strong>quadratic</strong> time.</p>\n<p>As you may have guessed, this function can be made more efficient:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">countAppearances</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">values</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> appearancesByValue <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  values<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// hasOwnProperty() runs in O(1) time</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>appearancesByValue<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      appearancesByValues<span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      appearancesByValues<span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> appearancesByValue\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>By stepping through all values only once, we have reduced this function to <code class=\"language-text\">O(n)</code> time. Much better!</p>\n<h3>O(n^c)</h3>\n<p>In general, the more loops you nest, the worse your efficiency.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// O(n^3)</span>\nvalues<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value1</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  values<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value2</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    values<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value3</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Do some work</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// O(n^4)</span>\nvalues<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value1</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  values<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value2</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    values<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value3</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      values<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value4</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Do some work</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// and so on ...</span></code></pre></div>\n<p>We say these functions run in <strong>polynomial</strong> time.</p>\n<h3>And so on…</h3>\n<p>Constant, linear, quadratic, and polynomial times are just the beginning. As you dig deeper into complexity, you will see many more - like <code class=\"language-text\">O(logn)</code> for Binary search.</p>\n<h2>Don’t Forget Space</h2>\n<p>As mentioned earlier, Big O Notation can also be applied to space. That is, the memory required to execute the code, excluding the input and output.</p>\n<p>Consider a function that runs in <code class=\"language-text\">O(1)</code> time of 10 seconds, but requires up to 10 gigabytes of memory to execute. Is it worth sacrificing some time to reduce the space?</p>\n<h2>The Worst Factor</h2>\n<p>With Big O Notation, efficiency is measured by the worst factor. If part of a function takes <code class=\"language-text\">O(n)</code> time, but another takes <code class=\"language-text\">O(n^2)</code> time, then the whole function takes <code class=\"language-text\">O(n^2)</code> time.</p>\n<p>Therefore, to improve efficiency, we must reduce the worst factor.</p>\n<h2>Writing More Efficient Code</h2>\n<p>Once we have a solution to a problem, we can make our code more efficient by reducing the worst factor. After all, there can only be minor improvements if we only optimize the good parts.</p>\n<p>Some quick tips:</p>\n<ul>\n<li>Avoid loops within loops</li>\n<li>Use objects for <code class=\"language-text\">O(1)</code> lookup</li>\n<li>Check the complexity of functions you use</li>\n<li>Catch easy cases as soon as possible</li>\n</ul>\n<p>By finding and reducing the worst factor, we can write more efficient code.</p>\n<h2>Further Reading</h2>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Big_O_notation\">Wikipedia: Big O Notation</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Analysis_of_algorithms\">Wikipedia: Analysis of Algorithms</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Time_complexity\">Wikipedia: Time Complexity</a></li>\n<li><a href=\"https://cs.stackexchange.com/questions/83574/does-space-complexity-analysis-usually-include-output-space\">StackExchange: Does space complexity analysis usually include output space?</a></li>\n</ul>","frontmatter":{"title":"Introducing Big O Notation","date":"March 26, 2019","description":"With software, efficiency means using less space or time."}}},"pageContext":{"slug":"/intro-big-o-notation/","previous":null,"next":{"fields":{"slug":"/restful-guide-to-apis/"},"frontmatter":{"title":"A RESTful Guide to APIs"}}}}}