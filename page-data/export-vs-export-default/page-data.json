{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/export-vs-export-default/","result":{"data":{"site":{"siteMetadata":{"title":"Matt Shelley"}},"markdownRemark":{"id":"6ce4689d-daee-5949-8141-ede3a221ad63","excerpt":"Over the years, I have seen conflicting opinions around when to use JavaScript’s  vs . One project may embrace , while another may avoid it. Admittedly, I have…","html":"<p>Over the years, I have seen conflicting opinions around when to use JavaScript’s <code class=\"language-text\">export</code> vs <code class=\"language-text\">export default</code>. One project may embrace <code class=\"language-text\">export default</code>, while another may avoid it. Admittedly, I have flip-flopped between projects, too.</p>\n<p>Looking for best practices, the documentation offers some suggestions but no definitive answers. Meanwhile, many developers dislike <code class=\"language-text\">export default</code>.</p>\n<p>So, what should we do?</p>\n<h2>What the documentation says</h2>\n<p>To begin, let’s be clear that <code class=\"language-text\">export</code> refers to named exports, and <code class=\"language-text\">export default</code> refers to the default export.</p>\n<h3>Named Exports</h3>\n<p>Named exports look like:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// module.js</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token number\">123</span>\n\n<span class=\"token comment\">// another-module.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> value <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./module'</span></code></pre></div>\n<p>According to the MDN web docs, “named exports are useful to export several values” [1]. Further, we can have zero or more named exports per module, and must reference the exact names when importing [1].</p>\n<h3>Default Export</h3>\n<p>Default exports look like:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// module.js</span>\n<span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token number\">123</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> value\n\n<span class=\"token comment\">// another-module.js</span>\n<span class=\"token keyword\">import</span> value <span class=\"token keyword\">from</span> <span class=\"token string\">'./module'</span></code></pre></div>\n<p>According to the MDN web docs, default exports are useful “to export a single value or to have a have a fallback value for your module” [1]. We can have one default export per module, and can name it however we like when importing [1].</p>\n<p>Under the hood, it appears that <code class=\"language-text\">export default</code> is syntactic sugar to create a named export called <code class=\"language-text\">default</code> [2][3]. Thus, these statements are equivalent:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// module.js</span>\n<span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token number\">123</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> value</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// module.js</span>\n<span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token number\">123</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> value <span class=\"token keyword\">as</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Further, these import statements are equivalent:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// another-module.js</span>\n<span class=\"token keyword\">import</span> value <span class=\"token keyword\">from</span> <span class=\"token string\">'./module'</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// another-module.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">as</span> value <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./module'</span></code></pre></div>\n<p>(If you’ve ever seen <code class=\"language-text\">require(&#39;./module&#39;).default</code>, now you know why.)   </p>\n<p>So, the default export aims to simplify some cases of named exports.</p>\n<h2>What others say</h2>\n<p>There are mixed opinions on named exports and default export.</p>\n<h3>Popular Libraries</h3>\n<p>Skimming through some popular libraries, we can see their preference.</p>\n<p><a href=\"https://reactjs.org/docs/hooks-state.html\">React</a> appears to use both default export and named exports:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span></code></pre></div>\n<p><a href=\"https://reactrouter.com/web/guides/quick-start\">React Router</a> appears to only use named exports:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> BrowserRouter<span class=\"token punctuation\">,</span> Switch<span class=\"token punctuation\">,</span> Route <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-router-dom'</span></code></pre></div>\n<p><a href=\"https://material-ui.com/components/buttons/\">Material-UI</a> appears to use default export for components and named exports for utilities:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> makeStyles <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@material-ui/core/styles'</span>\n<span class=\"token keyword\">import</span> Button <span class=\"token keyword\">from</span> <span class=\"token string\">'@material-ui/core/Button'</span></code></pre></div>\n<p><a href=\"https://formik.org/docs/examples/basic\">Formik</a> appears to only use named exports:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Formik<span class=\"token punctuation\">,</span> Field<span class=\"token punctuation\">,</span> Form <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'formik'</span></code></pre></div>\n<p><a href=\"https://stackoverflow.com/questions/35250500/correct-way-to-import-lodash\">Lodash</a> appears to prefer default exports, but also supports named exports:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> includes <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash/includes'</span>\n<span class=\"token comment\">// Alternatively:</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> includes <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash'</span></code></pre></div>\n<p>Among popular libraries there is no preferred choice.</p>\n<h3>TypeScript</h3>\n<p>TypeScript recommends default export for modules with a primary purpose [4]:</p>\n<blockquote>\n<h4>If you’re only exporting a single class or function, use export default</h4>\n<p>… If a module’s primary purpose is to house one specific export, then you should consider exporting it as a default export. This makes both importing and actually using the import a little easier.</p>\n</blockquote>\n<p>Further, TypeScript recommends named exports when there are multiple things to export [4].</p>\n<h3>Human Who Codes</h3>\n<p>Nicholas Zakas of <em>Human Who Codes</em> lists his problems with default export [5]:</p>\n<ul>\n<li>It may not be obvious what the default export is</li>\n<li>We may inconsistently import the same thing across modules</li>\n<li>We do not receive an error if we import the wrong thing</li>\n</ul>\n<h3>TypeScript Deep Dive</h3>\n<p>Basarat Ali Syed of <em>TypeScript Deep Dive</em> recommends against default export [6]:</p>\n<blockquote>\n<p>If you refactor Foo in foo.ts it will not rename it in bar.ts.</p>\n<p>If you end up needing to export more stuff from foo.ts (which is what many of your files will have) then you have to juggle the import syntax.</p>\n</blockquote>\n<p>He adds:</p>\n<ul>\n<li>Intellisense and Autocomplete play nicer with named exports</li>\n<li>It is easier to re-export named exports</li>\n<li>We catch typos with named exports, e.g. <code class=\"language-text\">Yup</code> vs <code class=\"language-text\">yup</code></li>\n<li>We cannot write <code class=\"language-text\">export default const ...</code> on a single line</li>\n</ul>\n<h2>What I say</h2>\n<p>When I work on a new project where I can influence our approach, I like to use default export for the main export and named exports for everything else.</p>\n<p>While there are flaws with default export, the syntax helps me focus on doing one thing per module. Further, the syntax works well when the module is named the same thing as the default export, such as with React components:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// SignupForm.js</span>\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">SignupForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> SignupForm\n\n<span class=\"token comment\">// AnotherComponent.js</span>\n<span class=\"token keyword\">import</span> SignupForm <span class=\"token keyword\">from</span> <span class=\"token string\">'./SignupForm'</span></code></pre></div>\n<p>When there are multiple things to export, such as with utilities and constants, I prefer named exports:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// primes.js</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getPrimes</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getMedianPrimes</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// another-module.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> getPrimes<span class=\"token punctuation\">,</span> getMedianPrimes <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./primes'</span></code></pre></div>\n<p>Conversely, when I work on an existing project, I follow the team. If we have a standard, then it’s better to be consistent and do right by everyone. After all, we create better software when we work together.</p>\n<p>So, really, <em>it depends</em>.</p>\n<h2>In Closing</h2>\n<p>To summarize, we can use <code class=\"language-text\">export default</code> to export the main thing in a module and <code class=\"language-text\">export</code> to export everything else. However, there are mixed opinions on whether we should use <code class=\"language-text\">export default</code> or just stick to <code class=\"language-text\">export</code>.</p>\n<p>Ultimately, I think it’s more important to be consistent and support the team.</p>\n<h2>References</h2>\n<ol>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/web/javascript/reference/statements/export\">“Export.” MDN Web Docs</a></li>\n<li><a href=\"https://tc39.es/ecma262/#sec-exports-static-semantics-exportentries\">“ExportEntries.” Ecma International</a></li>\n<li><a href=\"https://exploringjs.com/es6/ch_modules.html\">“Modules.” Exploring JS</a></li>\n<li><a href=\"https://www.typescriptlang.org/docs/handbook/modules.html\">“Modules.” TypeScript: Handbook</a></li>\n<li><a href=\"https://humanwhocodes.com/blog/2019/01/stop-using-default-exports-javascript-module/\">“Why I’ve stopped exporting defaults from my JavaScript modules.” Human Who Codes</a></li>\n<li><a href=\"https://basarat.gitbook.io/typescript/main-1/defaultisbad\">“Avoid Export Default.” TypeScript Deep Dive</a></li>\n</ol>","frontmatter":{"title":"JS: Export vs Export Default","date":"August 13, 2020","description":"Figuring out the best practice around export vs export default"}}},"pageContext":{"slug":"/export-vs-export-default/","previous":{"fields":{"slug":"/christmas-sunday-tdd/"},"frontmatter":{"title":"Walkthrough: Finding Christmas Sundays with Test-Driven Development"}},"next":{"fields":{"slug":"/commitment/"},"frontmatter":{"title":"Commitment: Weekly Posts"}}}}}