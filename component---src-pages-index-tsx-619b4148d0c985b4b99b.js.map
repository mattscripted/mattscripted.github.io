{"version":3,"sources":["webpack:///./src/components/bio.tsx","webpack:///./src/pages/index.tsx"],"names":["Bio","data","author","site","siteMetadata","style","display","marginBottom","rhythm","fixed","avatar","childImageSharp","alt","name","marginRight","minWidth","borderRadius","imgStyle","summary","BlogIndex","props","location","siteTitle","title","posts","allMarkdownRemark","edges","map","node","frontmatter","fields","slug","key","boxShadow","to","date","dangerouslySetInnerHTML","__html","description","excerpt","pageQuery"],"mappings":"iKAiEeA,IApDH,WACV,IAAMC,EAAO,OAoBLC,EAAWD,EAAKE,KAAKC,aAArBF,OAER,OACE,yBACEG,MAAO,CACLC,QAAS,OACTC,aAAcC,YAAO,OAGvB,kBAAC,IAAD,CACEC,MAAOR,EAAKS,OAAOC,gBAAgBF,MACnCG,IAAKV,EAAOW,KACZR,MAAO,CACLS,YAAaN,YAAO,IACpBD,aAAc,EACdQ,SAAU,GACVC,aAAc,QAEhBC,SAAU,CACRD,aAAc,SAGlB,2BACE,gCAASd,EAAOW,MAChB,6BACCX,EAAOgB,Y,kCC3DhB,sIAuEeC,UAxCG,SAACC,GAA0C,IACnDnB,EAAmBmB,EAAnBnB,KAAMoB,EAAaD,EAAbC,SACRC,EAAYrB,EAAKE,KAAKC,aAAamB,MACnCC,EAAQvB,EAAKwB,kBAAkBC,MAErC,OACE,kBAAC,IAAD,CAAQL,SAAUA,EAAUE,MAAOD,GAEjC,kBAAC,IAAD,CAAKC,MAAM,cACX,kBAAC,IAAD,MACCC,EAAMG,KAAI,YAAc,IAAXC,EAAW,EAAXA,KACNL,EAAQK,EAAKC,YAAYN,OAASK,EAAKE,OAAOC,KACpD,OACE,6BAASC,IAAKJ,EAAKE,OAAOC,MACxB,gCACE,wBACE1B,MAAO,CACLE,aAAcC,YAAO,EAAI,KAG3B,kBAAC,OAAD,CAAMH,MAAO,CAAE4B,UAAW,QAAUC,GAAIN,EAAKE,OAAOC,MACjDR,IAGL,+BAAQK,EAAKC,YAAYM,OAE3B,iCACE,uBACEC,wBAAyB,CACvBC,OAAQT,EAAKC,YAAYS,aAAeV,EAAKW,kBAaxD,IAAMC,EAAY,a","file":"component---src-pages-index-tsx-619b4148d0c985b4b99b.js","sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react'\nimport { useStaticQuery, graphql } from 'gatsby'\nimport Image from 'gatsby-image'\n\nimport { rhythm } from 'utils/typography'\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      avatar: file(absolutePath: { regex: \"/profile-pic.jpg/\" }) {\n        childImageSharp {\n          fixed(width: 50, height: 50) {\n            ...GatsbyImageSharpFixed\n          }\n        }\n      }\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n        }\n      }\n    }\n  `)\n\n  const { author } = data.site.siteMetadata\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        marginBottom: rhythm(2.5)\n      }}\n    >\n      <Image\n        fixed={data.avatar.childImageSharp.fixed}\n        alt={author.name}\n        style={{\n          marginRight: rhythm(1 / 2),\n          marginBottom: 0,\n          minWidth: 50,\n          borderRadius: '100%'\n        }}\n        imgStyle={{\n          borderRadius: '50%'\n        }}\n      />\n      <p>\n        <strong>{author.name}</strong>\n        <br />\n        {author.summary}\n      </p>\n    </div>\n  )\n}\n\nexport default Bio\n","import React from 'react'\nimport { Link, graphql, PageProps } from 'gatsby'\n\nimport Bio from 'components/bio'\nimport Layout from 'components/layout'\nimport SEO from 'components/seo'\nimport { rhythm } from 'utils/typography'\n\ntype Node = {\n  excerpt: string\n  fields: {\n    slug: string\n  }\n  frontmatter: {\n    date: string\n    title: string\n    description: string\n  }\n}\n\ntype BlogIndexQueryProps = {\n  site: {\n    siteMetadata: {\n      title: string\n    }\n  }\n  allMarkdownRemark: {\n    edges: Array<{ node: Node }>\n  }\n}\n\nconst BlogIndex = (props: PageProps<BlogIndexQueryProps>) => {\n  const { data, location } = props\n  const siteTitle = data.site.siteMetadata.title\n  const posts = data.allMarkdownRemark.edges\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      {/* eslint-disable-next-line react/jsx-pascal-case */}\n      <SEO title='All posts' />\n      <Bio />\n      {posts.map(({ node }) => {\n        const title = node.frontmatter.title || node.fields.slug\n        return (\n          <article key={node.fields.slug}>\n            <header>\n              <h3\n                style={{\n                  marginBottom: rhythm(1 / 4)\n                }}\n              >\n                <Link style={{ boxShadow: 'none' }} to={node.fields.slug}>\n                  {title}\n                </Link>\n              </h3>\n              <small>{node.frontmatter.date}</small>\n            </header>\n            <section>\n              <p\n                dangerouslySetInnerHTML={{\n                  __html: node.frontmatter.description || node.excerpt\n                }}\n              />\n            </section>\n          </article>\n        )\n      })}\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}