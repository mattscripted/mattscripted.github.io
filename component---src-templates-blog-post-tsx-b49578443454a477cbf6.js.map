{"version":3,"sources":["webpack:///./src/components/bio.tsx","webpack:///./src/templates/blog-post.tsx"],"names":["Bio","data","author","site","siteMetadata","style","display","marginBottom","rhythm","fixed","avatar","childImageSharp","alt","name","marginRight","minWidth","borderRadius","imgStyle","summary","BlogPostTemplate","props","pageContext","location","post","markdownRemark","siteTitle","title","previous","next","frontmatter","description","excerpt","marginTop","scale","date","dangerouslySetInnerHTML","__html","html","flexWrap","justifyContent","listStyle","padding","to","fields","slug","rel","pageQuery"],"mappings":"iKAiEeA,IApDH,WACV,IAAMC,EAAO,OAoBLC,EAAWD,EAAKE,KAAKC,aAArBF,OAER,OACE,yBACEG,MAAO,CACLC,QAAS,OACTC,aAAcC,YAAO,OAGvB,kBAAC,IAAD,CACEC,MAAOR,EAAKS,OAAOC,gBAAgBF,MACnCG,IAAKV,EAAOW,KACZR,MAAO,CACLS,YAAaN,YAAO,IACpBD,aAAc,EACdQ,SAAU,GACVC,aAAc,QAEhBC,SAAU,CACRD,aAAc,SAGlB,2BACE,gCAASd,EAAOW,MAChB,6BACCX,EAAOgB,Y,kCC3DhB,sIAiHeC,UA1EU,SAACC,GAAmF,IACnGnB,EAAgCmB,EAAhCnB,KAAMoB,EAA0BD,EAA1BC,YAAaC,EAAaF,EAAbE,SACrBC,EAAOtB,EAAKuB,eACZC,EAAYxB,EAAKE,KAAKC,aAAasB,MACjCC,EAAmBN,EAAnBM,SAAUC,EAASP,EAATO,KAElB,OACE,kBAAC,IAAD,CAAQN,SAAUA,EAAUI,MAAOD,GAEjC,kBAAC,IAAD,CACEC,MAAOH,EAAKM,YAAYH,MACxBI,YAAaP,EAAKM,YAAYC,aAAeP,EAAKQ,UAEpD,iCACE,gCACE,wBACE1B,MAAO,CACL2B,UAAWxB,YAAO,GAClBD,aAAc,IAGfgB,EAAKM,YAAYH,OAEpB,uBACErB,MAAK,iBACA4B,aAAM,IADN,CAEH3B,QAAS,QACTC,aAAcC,YAAO,MAGtBe,EAAKM,YAAYK,OAGtB,6BAASC,wBAAyB,CAAEC,OAAQb,EAAKc,QACjD,wBACEhC,MAAO,CACLE,aAAcC,YAAO,MAGzB,gCACE,kBAAC,IAAD,QAIJ,6BACE,wBACEH,MAAO,CACLC,QAAS,OACTgC,SAAU,OACVC,eAAgB,gBAChBC,UAAW,OACXC,QAAS,IAGX,4BACGd,GACC,kBAAC,OAAD,CAAMe,GAAIf,EAASgB,OAAOC,KAAMC,IAAI,QAApC,KACKlB,EAASE,YAAYH,QAI9B,4BACGE,GACC,kBAAC,OAAD,CAAMc,GAAId,EAAKe,OAAOC,KAAMC,IAAI,QAC7BjB,EAAKC,YAAYH,MADpB,WAaP,IAAMoB,EAAY,Y","file":"component---src-templates-blog-post-tsx-b49578443454a477cbf6.js","sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react'\nimport { useStaticQuery, graphql } from 'gatsby'\nimport Image from 'gatsby-image'\n\nimport { rhythm } from 'utils/typography'\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      avatar: file(absolutePath: { regex: \"/profile-pic.jpg/\" }) {\n        childImageSharp {\n          fixed(width: 50, height: 50) {\n            ...GatsbyImageSharpFixed\n          }\n        }\n      }\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n        }\n      }\n    }\n  `)\n\n  const { author } = data.site.siteMetadata\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        marginBottom: rhythm(2.5)\n      }}\n    >\n      <Image\n        fixed={data.avatar.childImageSharp.fixed}\n        alt={author.name}\n        style={{\n          marginRight: rhythm(1 / 2),\n          marginBottom: 0,\n          minWidth: 50,\n          borderRadius: '100%'\n        }}\n        imgStyle={{\n          borderRadius: '50%'\n        }}\n      />\n      <p>\n        <strong>{author.name}</strong>\n        <br />\n        {author.summary}\n      </p>\n    </div>\n  )\n}\n\nexport default Bio\n","import React from 'react'\nimport { Link, graphql, PageProps } from 'gatsby'\n\nimport Bio from 'components/bio'\nimport Layout from 'components/layout'\nimport SEO from 'components/seo'\nimport { rhythm, scale } from 'utils/typography'\n\ntype BlogPostTemplateQueryProps = {\n  site: {\n    siteMetadata: {\n      title: string\n    }\n  }\n  markdownRemark: {\n    excerpt: string\n    html: string\n    frontmatter: {\n      title: string\n      date: string\n      description: string\n    }\n  }\n}\n\ntype Node = {\n  fields: {\n    slug: string\n  }\n  frontmatter: {\n    title: string\n  }\n}\n\ntype BlogPostTemplatePageContextProps = {\n  previous: Node\n  next: Node\n}\n\nconst BlogPostTemplate = (props: PageProps<BlogPostTemplateQueryProps, BlogPostTemplatePageContextProps>) => {\n  const { data, pageContext, location } = props\n  const post = data.markdownRemark\n  const siteTitle = data.site.siteMetadata.title\n  const { previous, next } = pageContext\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      {/* eslint-disable-next-line react/jsx-pascal-case */}\n      <SEO\n        title={post.frontmatter.title}\n        description={post.frontmatter.description || post.excerpt}\n      />\n      <article>\n        <header>\n          <h1\n            style={{\n              marginTop: rhythm(1),\n              marginBottom: 0\n            }}\n          >\n            {post.frontmatter.title}\n          </h1>\n          <p\n            style={{\n              ...scale(-1 / 5),\n              display: 'block',\n              marginBottom: rhythm(1)\n            }}\n          >\n            {post.frontmatter.date}\n          </p>\n        </header>\n        <section dangerouslySetInnerHTML={{ __html: post.html }} />\n        <hr\n          style={{\n            marginBottom: rhythm(1)\n          }}\n        />\n        <footer>\n          <Bio />\n        </footer>\n      </article>\n\n      <nav>\n        <ul\n          style={{\n            display: 'flex',\n            flexWrap: 'wrap',\n            justifyContent: 'space-between',\n            listStyle: 'none',\n            padding: 0\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel='prev'>\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel='next'>\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </Layout>\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n      }\n    }\n  }\n`\n"],"sourceRoot":""}